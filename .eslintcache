[{"/home/rahul/Desktop/projects/GoDutch/src/Components/AddExpense.js":"1","/home/rahul/Desktop/projects/GoDutch/src/index.js":"2","/home/rahul/Desktop/projects/GoDutch/src/Components/AddCountryCode.js":"3","/home/rahul/Desktop/projects/GoDutch/src/Components/AddFriend.js":"4","/home/rahul/Desktop/projects/GoDutch/src/Components/AddMoreFriends.js":"5","/home/rahul/Desktop/projects/GoDutch/src/Components/OptionsDialog.js":"6","/home/rahul/Desktop/projects/GoDutch/src/Components/PerPersonShareDialog.js":"7","/home/rahul/Desktop/projects/GoDutch/src/Components/UserBalance.js":"8","/home/rahul/Desktop/projects/GoDutch/src/Components/SplitByPercentage.js":"9","/home/rahul/Desktop/projects/GoDutch/src/App.js":"10","/home/rahul/Desktop/projects/GoDutch/src/Components/ConfirmFriends.js":"11","/home/rahul/Desktop/projects/GoDutch/src/Components/WhoPaidDialog.js":"12","/home/rahul/Desktop/projects/GoDutch/src/Components/SplitUnequally.js":"13","/home/rahul/Desktop/projects/GoDutch/src/Components/FilterDialog.js":"14","/home/rahul/Desktop/projects/GoDutch/src/reportWebVitals.js":"15","/home/rahul/Desktop/projects/GoDutch/src/Components/AddDetails.js":"16","/home/rahul/Desktop/projects/GoDutch/src/Components/EditFriendDetails.js":"17","/home/rahul/Desktop/projects/GoDutch/src/Components/GroupsTab.js":"18","/home/rahul/Desktop/projects/GoDutch/src/Components/SplitByAdjustment.js":"19","/home/rahul/Desktop/projects/GoDutch/src/Components/FriendsList.js":"20","/home/rahul/Desktop/projects/GoDutch/src/Components/Header.js":"21","/home/rahul/Desktop/projects/GoDutch/src/Components/ThreeDotsPopover.js":"22","/home/rahul/Desktop/projects/GoDutch/src/Components/SplitByShare.js":"23","/home/rahul/Desktop/projects/GoDutch/src/Components/NavBar.js":"24","/home/rahul/Desktop/projects/GoDutch/src/Components/PaidByWarning.js":"25","/home/rahul/Desktop/projects/GoDutch/src/Components/FriendsTab.js":"26"},{"size":17909,"mtime":1618373842505,"results":"27","hashOfConfig":"28"},{"size":486,"mtime":1609484607692,"results":"29","hashOfConfig":"28"},{"size":2349,"mtime":1608434691683,"results":"30","hashOfConfig":"28"},{"size":3081,"mtime":1608434691683,"results":"31","hashOfConfig":"28"},{"size":4220,"mtime":1608434691683,"results":"32","hashOfConfig":"28"},{"size":6013,"mtime":1608434691687,"results":"33","hashOfConfig":"28"},{"size":4698,"mtime":1618251740817,"results":"34","hashOfConfig":"28"},{"size":999,"mtime":1608434691687,"results":"35","hashOfConfig":"28"},{"size":3761,"mtime":1617246745244,"results":"36","hashOfConfig":"28"},{"size":190,"mtime":1608434691683,"results":"37","hashOfConfig":"28"},{"size":6175,"mtime":1608434691683,"results":"38","hashOfConfig":"28"},{"size":2601,"mtime":1612009316621,"results":"39","hashOfConfig":"28"},{"size":3175,"mtime":1617250929809,"results":"40","hashOfConfig":"28"},{"size":1798,"mtime":1608434691687,"results":"41","hashOfConfig":"28"},{"size":362,"mtime":1608434691687,"results":"42","hashOfConfig":"28"},{"size":5342,"mtime":1608434691683,"results":"43","hashOfConfig":"28"},{"size":6894,"mtime":1608434691683,"results":"44","hashOfConfig":"28"},{"size":1805,"mtime":1608434691687,"results":"45","hashOfConfig":"28"},{"size":1947,"mtime":1617393533619,"results":"46","hashOfConfig":"28"},{"size":1496,"mtime":1611671353331,"results":"47","hashOfConfig":"28"},{"size":1275,"mtime":1608434691687,"results":"48","hashOfConfig":"28"},{"size":1832,"mtime":1608434691687,"results":"49","hashOfConfig":"28"},{"size":3844,"mtime":1617693684502,"results":"50","hashOfConfig":"28"},{"size":1489,"mtime":1608434691687,"results":"51","hashOfConfig":"28"},{"size":1269,"mtime":1614371259950,"results":"52","hashOfConfig":"28"},{"size":2629,"mtime":1609913625849,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},"nowjuc",{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"65"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"60"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"60"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/rahul/Desktop/projects/GoDutch/src/Components/AddExpense.js",["116","117","118"],"import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport ReceiptIcon from \"@material-ui/icons/Receipt\";\n\nimport WhoPaidDialog from \"./WhoPaidDialog\";\nimport ChoosePayer from \"./ChoosePayer\";\nimport AmountPaidByPerPerson from \"./AmountPaidByPerPerson\";\nimport PerPersonShareDialog from \"./PerPersonShareDialog\";\n\nimport firebase from \"../firebase/firebase\";\n\nconst AddExpenseStyles = {\n  AddExpense: {\n    maxWidth: \"600px\",\n    position: \"relative\",\n  },\n  header: {\n    height: \"40px\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    backgroundColor: \"#00b8a9\",\n  },\n  left: {\n    width: \"30%\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n  addFriendForExpense: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    position: \"relative\",\n    marginTop: \"20px\",\n  },\n  selectFriend: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  friendInput: {\n    width: \"400px\",\n  },\n  populateFriends: {\n    width: \"400px\",\n    height: \"auto\",\n    marginTop: \"5px\",\n    marginLeft: \"10px\",\n    border: \"1px solid #eee\",\n    position: \"absolute\",\n    top: \"40px\",\n    right: \"50px\",\n    backgroundColor: \"#fff\",\n    zIndex: 5,\n    boxShadow: \"2px 2px 2px 2px #C9C9C9\",\n  },\n  friend: {\n    height: \"40px\",\n    width: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    cursor: \"pointer\",\n    paddingLeft: \"10px\",\n    \"&:hover\": {\n      backgroundColor: \"#eee\",\n    },\n  },\n  description: {\n    display: \"flex\",\n    alignItems: \"center\",\n    margin: \"5px 20px\",\n  },\n  descriptionText: {\n    outline: \"none\",\n    width: \"50%\",\n  },\n  expense: {\n    display: \"flex\",\n    alignItems: \"center\",\n    margin: \"5px 20px\",\n  },\n  expenseValue: {\n    outline: \"none\",\n    width: \"50%\",\n  },\n  split: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    marginTop: \"1rem\",\n  },\n  splitType: {\n    width: \"300px\",\n    textAlign: \"center\",\n    padding: \"0.3rem\",\n    cursor: \"pointer\",\n    boxShadow: \"1px 1px 2px 1px #C9C9C9\",\n  },\n};\n\nclass AddExpense extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      friendsListDialogOpen: true,\n      whoPaidDialog: false,\n      choosePayerDialog: false,\n      AmountPaidByPerPersonDialog: false,\n      perPersonShareDialog: false,\n\n      friendsList: [],\n      singlePayerName: \"You\",\n\n      youPaidSplitEqual: true,\n      youOweFull: false,\n      theyOweFull: false,\n      theyPaidSplitEqual: false,\n      moreOptions: false,\n      whoPaidText: \"Paid by YOU and split EQUALLY\",\n      multiplePeople: false,\n      defaultPayerState: true,\n\n      currentExpense: {\n        description: \"\",\n        expenseAmount: 0,\n        contributors: [],\n        whoPaid: \"\",\n        amountYouOwe: \"\",\n      },\n    };\n  }\n\n  componentDidMount() {\n    let friendsList = [];\n    firebase\n      .database()\n      .ref(\"friendsList\")\n      .on(\"value\", (snapshot) => {\n        friendsList = [];\n        snapshot.forEach((childSnapshot) => {\n          friendsList.push({\n            ...childSnapshot.val(),\n            id: childSnapshot.key,\n          });\n        });\n        this.setState({ friendsList });\n      });\n  }\n\n  toggleFriendsListDialog = () => {\n    this.setState({ friendsListDialogOpen: !this.state.friendsListDialogOpen });\n  };\n  toggleChoosePayerDialog = () => {\n    this.setState({ choosePayerDialog: !this.state.choosePayerDialog });\n  };\n  toggleWhoPaidDialog = () => {\n    this.setState({ whoPaidDialog: !this.state.whoPaidDialog });\n  };\n  toggleAmountPaidByPerPerson = () => {\n    this.setState({\n      choosePayerDialog: !this.state.choosePayerDialog,\n      AmountPaidByPerPersonDialog: !this.state.AmountPaidByPerPersonDialog,\n    });\n  };\n  togglePerPersonShareDialog = () => {\n    this.setState({ perPersonShareDialog: !this.state.perPersonShareDialog });\n  };\n\n  handleContributors = (e, users) => {\n    let contributors = users.map((user) => {\n      return {\n        name: user.name,\n        id: user.id,\n        amountPaid: 0,\n        expenseShare: 0,\n        amountUserOwes: 0,\n      };\n    });\n    this.setState({\n      currentExpense: {\n        ...this.state.currentExpense,\n        contributors: [\n          {\n            name: \"You\",\n            id: \"abcd\",\n            amountPaid: 0,\n            expenseShare: 0,\n            amountUserOwes: 0,\n          },\n          ...contributors,\n        ],\n      },\n    });\n  };\n  handleDescription = (e) => {\n    this.setState({\n      currentExpense: {\n        ...this.state.currentExpense,\n        description: e.target.value,\n      },\n    });\n  };\n  handleAmount = (e) => {\n    let { currentExpense, defaultPayerState } = this.state;\n    let expenseAmount = parseFloat(e.target.value);\n    if (defaultPayerState) {\n      let contributors = currentExpense.contributors.map((user) => {\n        return user.id === \"abcd\"\n          ? { ...user, amountPaid: expenseAmount }\n          : { ...user };\n      });\n      this.setState({\n        currentExpense: { ...currentExpense, contributors, expenseAmount },\n      });\n    } else {\n      this.setState({\n        currentExpense: { ...currentExpense, expenseAmount },\n      });\n    }\n  };\n\n  handlePayer = (payer) => {\n    let { contributors, expenseAmount } = this.state.currentExpense;\n    let updatedContributors = contributors.map((user) => {\n      return user.id === payer.id\n        ? { ...user, amountPaid: expenseAmount }\n        : { ...user, amountPaid: 0 };\n    });\n    this.setState({\n      multiplePeople: false,\n      singlePayerName: payer.name,\n      choosePayerDialog: !this.state.choosePayerDialog,\n      defaultPayerState: false,\n      currentExpense: {\n        ...this.state.currentExpense,\n        contributors: updatedContributors,\n      },\n    });\n  };\n  resetExpense = () => {\n    this.setState({\n      currentExpense: {\n        description: \"\",\n        expenseAmount: 0,\n        contributors: [],\n        whoPaid: \"\",\n        amountYouOwe: 0,\n      },\n    });\n    this.props.toggleAddExpenseDialog();\n  };\n  handleMultiplePeople = () => {\n    this.setState({\n      multiplePeople: true,\n      AmountPaidByPerPersonDialog: !this.state.AmountPaidByPerPersonDialog,\n    });\n  };\n  toggleAmountPaidByPerPerson = () => {\n    this.setState({\n      choosePayerDialog: !this.state.choosePayerDialog,\n      AmountPaidByPerPersonDialog: !this.state.AmountPaidByPerPersonDialog,\n    });\n  };\n  handleExpensePaidShare = (contributors) => {\n    console.log(contributors);\n  };\n  handleSplit = (contributors) => {\n    const updatedContributors = contributors.map((user) => {\n      return { ...user, amountUserOwes: user.expenseShare - user.amountPaid };\n    });\n    let contributorsWithoutYou = updatedContributors.slice(1);\n    let contIncOrder = updatedContributors\n      .slice(1)\n      .sort((a, b) => a.amountUserOwes - b.amountUserOwes);\n    let contDecOrder = updatedContributors\n      .slice(1)\n      .sort((a, b) => b.amountUserOwes - a.amountUserOwes);\n    let balanceSheet = {};\n    let amountYouOwe = updatedContributors[0].amountUserOwes;\n    if (amountYouOwe > 0) {\n      contIncOrder.forEach(({ amountUserOwes, id }) => {\n        if (amountYouOwe > Math.abs(amountUserOwes)) {\n          balanceSheet = { ...balanceSheet, [id]: amountUserOwes };\n          amountYouOwe -= Math.abs(amountUserOwes);\n        } else {\n          balanceSheet = { ...balanceSheet, [id]: -amountYouOwe };\n          amountYouOwe = 0;\n        }\n      });\n    } else if (amountYouOwe < 0) {\n      contDecOrder.forEach(({ amountUserOwes, id }) => {\n        Math.abs(amountYouOwe) > amountUserOwes\n          ? (amountYouOwe += amountUserOwes)\n          : (amountYouOwe = 0);\n      });\n    }\n  };\n  render() {\n    const { classes, addExpenseDialog } = this.props;\n    const {\n      friendsList,\n      whoPaidDialog,\n      choosePayerDialog,\n      AmountPaidByPerPersonDialog,\n      perPersonShareDialog,\n      currentExpense,\n      currentExpense: { expenseAmount, contributors },\n    } = this.state;\n    return (\n      <div className={classes.addFriend}>\n        <Dialog\n          fullScreen={true}\n          open={addExpenseDialog}\n          aria-labelledby=\"Add new expense\"\n          aria-describedby=\"Add new expense\"\n          onBackdropClick={this.resetExpense}\n          onEscapeKeyDown={this.resetExpense}\n          classes={{ paper: classes.AddExpense }}\n        >\n          <form onSubmit={this.handleExpenseSharing}>\n            <div className={classes.header}>\n              <div className={classes.left}>\n                <ArrowBackIcon className={classes.arrowBack} />\n                <Typography variant=\"subtitle1\">Add expense</Typography>\n              </div>\n              <div className={classes.right}>\n                <Button type=\"submit\">SAVE</Button>\n              </div>\n            </div>\n            <div className={classes.Addexpense}>\n              <div className={classes.addFriendForExpense}>\n                <div className={classes.selectFriend}>\n                  <div className={classes.text}>With you and:&nbsp;</div>\n                  <Autocomplete\n                    multiple\n                    id=\"tags-standard\"\n                    options={friendsList}\n                    getOptionLabel={(option) => option.name}\n                    style={{ width: 300 }}\n                    onChange={this.handleContributors}\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        autoFocus={true}\n                        label=\"Enter names, emails or phone #s\"\n                        required={!currentExpense.contributors.length}\n                      />\n                    )}\n                  />\n                </div>\n              </div>\n\n              <div className={classes.description}>\n                <ReceiptIcon />\n                <TextField\n                  id=\"description\"\n                  className={classes.descriptionText}\n                  placeholder=\"Enter a description\"\n                  value={currentExpense.description}\n                  onChange={this.handleDescription}\n                  required\n                />\n              </div>\n              <div className={classes.expense}>\n                <div>INR:&nbsp;</div>\n                <TextField\n                  id=\"description\"\n                  className={classes.expenseValue}\n                  placeholder=\"0.00\"\n                  type=\"number\"\n                  value={currentExpense.expenseAmount}\n                  onChange={this.handleAmount}\n                  required\n                />\n              </div>\n              <div className={classes.split}>\n                <div>\n                  Paid by\n                  <span\n                    className={classes.splitType}\n                    onClick={this.toggleChoosePayerDialog}\n                  >\n                    {this.state.multiplePeople\n                      ? \"2+ People\"\n                      : `${this.state.singlePayerName}`}\n                  </span>\n                  and split\n                  <span\n                    className={classes.splitType}\n                    onClick={this.togglePerPersonShareDialog}\n                  >\n                    EQUALLY\n                  </span>\n                </div>\n              </div>\n            </div>\n          </form>\n        </Dialog>\n\n        {whoPaidDialog && (\n          <WhoPaidDialog\n            whoPaidDialog={whoPaidDialog}\n            handlePayment={this.handlePayment}\n            toggleWhoPaidDialog={this.toggleWhoPaidDialog}\n            contributors={contributors}\n            expenseAmount={expenseAmount}\n          />\n        )}\n        {choosePayerDialog && (\n          <ChoosePayer\n            toggleChoosePayerDialog={this.toggleChoosePayerDialog}\n            choosePayerDialog={choosePayerDialog}\n            contributors={contributors}\n            handlePayer={this.handlePayer}\n            handleMultiplePeople={this.handleMultiplePeople}\n          />\n        )}\n        {AmountPaidByPerPersonDialog && (\n          <AmountPaidByPerPerson\n            AmountPaidByPerPersonDialog={AmountPaidByPerPersonDialog}\n            toggleAmountPaidByPerPerson={this.toggleAmountPaidByPerPerson}\n            contributors={contributors}\n            handleExpensePaidShare={this.handleExpensePaidShare}\n            expenseAmount={expenseAmount}\n          />\n        )}\n        {perPersonShareDialog && (\n          <PerPersonShareDialog\n            perPersonShareDialog={perPersonShareDialog}\n            togglePerPersonShareDialog={this.togglePerPersonShareDialog}\n            contributors={contributors}\n            expenseAmount={expenseAmount}\n            handleSplit={this.handleSplit}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default withStyles(AddExpenseStyles)(AddExpense);\n\n{\n  /*\n  Note: Write logic which only computes how much you owe your friends or vice versa. \nStep 1: Loop through all contributors and calculate 'amountUserOwes' for each contributor. \n        amountUserOwes = expenseShare - amountPaid\nStep 2: Check if you owe money for this expense or you are owed. \nStep 3: Create a new array 'contributorsWithoutYou' and push all contributors except yourself\nStep 4: If you owe money(amountUserOwes > 0), sort the array in decreasing order of AmountUserOwes\nStep 5: If you are owed money((amountUserOwes < 0)), sort the array in increasing order of AmountUserOwes\nStep 6: Create a variable balanceRemaining that will calculate the balance remaining while splitting expenses\nStep 7: Loop through the contributorsWithoutYou array.\nStep 8: In each iteration, check if the your amountUserOwes is > than user's amountUserOwes. \n        If it is, \n*/\n}\n\n{\n  /* {contributors.length === 2 ? (\n                    <div\n                      className={classes.splitType}\n                      onClick={this.toggleWhoPaidDialog}\n                    >\n                      Paid by YOU and split EQUALLY\n                    </div>\n                  ) : (\n                    <div>\n                      Paid by\n                      <span\n                        className={classes.splitType}\n                        onClick={this.toggleChoosePayerDialog}\n                      >\n                        YOU\n                      </span>\n                      and split\n                      <span className={classes.splitType}>EQUALLY</span>\n                    </div>\n                  )} \n                \n                 handlePayment = (payee) => {\n    switch (payee) {\n      case \"youPaidSplitEqual\":\n        this.setState({\n          youPaidSplitEqual: true,\n          youOweFull: false,\n          theyOweFull: false,\n          theyPaidSplitEqual: false,\n          moreOptions: false,\n          whoPaidText: \"Paid by YOU and split EQUALLY\",\n        });\n        break;\n      case \"youOweFull\":\n        this.setState({\n          youPaidSplitEqual: false,\n          youOweFull: true,\n          theyOweFull: false,\n          theyPaidSplitEqual: false,\n          moreOptions: false,\n          whoPaidText: \"You owe the full amount\",\n        });\n        break;\n      case \"theyOweFull\":\n        this.setState({\n          youPaidSplitEqual: false,\n          youOweFull: false,\n          theyOweFull: true,\n          theyPaidSplitEqual: false,\n          moreOptions: false,\n          whoPaidText: \"They owe the full amount\",\n        });\n        break;\n      case \"theyPaidSplitEqual\":\n        this.setState({\n          youPaidSplitEqual: false,\n          youOweFull: false,\n          theyOweFull: false,\n          theyPaidSplitEqual: true,\n          moreOptions: false,\n          whoPaidText: \"Paid by the other person and split EQUALLY\",\n        });\n        break;\n      case \"moreOptions\":\n        this.setState({\n          youPaidSplitEqual: false,\n          youOweFull: false,\n          theyOweFull: false,\n          theyPaidSplitEqual: false,\n          moreOptions: true,\n          choosePayerDialog: !this.state.choosePayerDialog,\n        });\n        break;\n    }\n    this.setState({ whoPaidDialog: !this.state.whoPaidDialog });\n  };\n  handleExpenseSharing = (e) => {\n    e.preventDefault();\n    let {\n      youPaidSplitEqual,\n      currentExpense,\n      youOweFull,\n      theyOweFull,\n      theyPaidSplitEqual,\n      moreOptions,\n      currentExpense: { expenseAmount, contributors },\n    } = this.state;\n    let amountYouOwe, whoPaid, perPersonShare, amount;\n\n    switch (true) {\n      case youPaidSplitEqual:\n        perPersonShare = expenseAmount / contributors.length;\n        amount = perPersonShare * contributors.length - 1;\n        amountYouOwe = amount;\n        whoPaid = \"You\";\n        break;\n      case youOweFull:\n        amountYouOwe = -expenseAmount;\n        whoPaid = \"You\";\n        break;\n      case theyOweFull:\n        amountYouOwe = expenseAmount;\n        whoPaid = contributors[0];\n        break;\n      case theyPaidSplitEqual:\n        perPersonShare = expenseAmount / contributors.length;\n        amountYouOwe = -perPersonShare;\n        whoPaid = contributors[0];\n        break;\n      case moreOptions:\n        console.log(\"moreOptions\");\n        break;\n    }\n    console.log(\" no moreOptions\");\n    this.setState({\n      currentExpense: { ...currentExpense, amountYouOwe, whoPaid },\n    });\n    this.props.toggleAddExpenseDialog();\n    firebase\n      .database()\n      .ref(\"allExpenses\")\n      .push({ ...currentExpense, amountYouOwe, whoPaid });\n    // firebase.database().ref(\"friendsList\").push({})\n  };\n                \n                */\n}\n",["119","120"],"/home/rahul/Desktop/projects/GoDutch/src/index.js",[],["121","122"],"/home/rahul/Desktop/projects/GoDutch/src/Components/AddCountryCode.js",[],"/home/rahul/Desktop/projects/GoDutch/src/Components/AddFriend.js",[],["123","124"],"/home/rahul/Desktop/projects/GoDutch/src/Components/AddMoreFriends.js",[],"/home/rahul/Desktop/projects/GoDutch/src/Components/OptionsDialog.js",[],"/home/rahul/Desktop/projects/GoDutch/src/Components/PerPersonShareDialog.js",["125","126"],"import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport { MenuItem, FormControl, Select } from \"@material-ui/core\";\nimport SplitEqually from \"./SplitEqually\";\nimport SplitUnequally from \"./SplitUnequally\";\nimport SplitByPercentage from \"./SplitByPercentage\";\nimport SplitByShare from \"./SplitByShare\";\nimport SplitByAdjustment from \"./SplitByAdjustment\";\n\nconst PerPersonShareDialogStyles = {\n  dialog: {\n    width: \"400px\",\n    height: \"auto\",\n    display: \"flex\",\n    padding: \"0rem 1rem 2rem 1rem\",\n  },\n  header: {\n    textAlign: \"center\",\n    color: \"#777\",\n    margin: \"1rem 0rem\",\n  },\n  formControl: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  selectSplit: {\n    width: \"12rem\",\n  },\n};\n\nclass PerPersonShareDialog extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentSplitMode: \"equally\",\n      equally: true,\n      unequally: false,\n      percentages: false,\n      shares: false,\n      adjustment: false,\n    };\n  }\n  showSplitWindow = (equally, unequally, percentages, shares, adjustment) => {\n    this.setState({\n      equally,\n      unequally,\n      percentages,\n      shares,\n      adjustment,\n    });\n  };\n  handleSplitChnage = (e) => {\n    let currentSplitMode = e.target.value;\n    this.setState({ currentSplitMode });\n    switch (currentSplitMode) {\n      case \"equally\":\n        this.showSplitWindow(true, false, false, false, false);\n        break;\n      case \"unequally\":\n        this.showSplitWindow(false, true, false, false, false);\n        break;\n      case \"percentages\":\n        this.showSplitWindow(false, false, true, false, false);\n        break;\n      case \"shares\":\n        this.showSplitWindow(false, false, false, true, false);\n        break;\n      case \"adjustment\":\n        this.showSplitWindow(false, false, false, false, true);\n        break;\n    }\n  };\n  handleSplit = (contributors) => {\n    this.props.handleSplit(contributors);\n  };\n\n  render() {\n    const {\n      classes,\n      perPersonShareDialog,\n      togglePerPersonShareDialog,\n      contributors,\n      expenseAmount,\n    } = this.props;\n    const {} = this.state;\n    console.log(this.state.totalAmount);\n    return (\n      <div className={classes.perPersonShare}>\n        <Dialog\n          open={perPersonShareDialog}\n          aria-labelledby=\"Each person's share in the expense\"\n          aria-describedby=\"Each person's share in the expense\"\n          onBackdropClick={togglePerPersonShareDialog}\n          onEscapeKeyDown={togglePerPersonShareDialog}\n          classes={{ paper: classes.dialog }}\n        >\n          <div className={classes.header}>Enter each person's share</div>\n          <FormControl className={classes.formControl}>\n            <Select\n              labelId=\"demo-simple-select-label\"\n              id=\"demo-simple-select\"\n              value={this.state.currentSplitMode}\n              onChange={this.handleSplitChnage}\n              className={classes.selectSplit}\n            >\n              <MenuItem value={\"equally\"}>Split Equally</MenuItem>\n              <MenuItem value={\"unequally\"}>Split Unequally</MenuItem>\n              <MenuItem value={\"percentages\"}>Split by percentages</MenuItem>\n              <MenuItem value={\"shares\"}>Split by shares</MenuItem>\n              <MenuItem value={\"adjustment\"}>Split by adjustment</MenuItem>\n            </Select>\n          </FormControl>\n          {this.state.equally && (\n            <SplitEqually\n              contributors={contributors}\n              expenseAmount={expenseAmount}\n              handleSplit={this.handleSplit}\n            />\n          )}\n          {this.state.unequally && (\n            <SplitUnequally\n              contributors={contributors}\n              expenseAmount={expenseAmount}\n              handleSplit={this.handleSplit}\n            />\n          )}\n          {this.state.percentages && (\n            <SplitByPercentage\n              contributors={contributors}\n              expenseAmount={expenseAmount}\n              handleSplit={this.handleSplit}\n            />\n          )}\n          {this.state.shares && (\n            <SplitByShare\n              contributors={contributors}\n              expenseAmount={expenseAmount}\n              handleSplit={this.handleSplit}\n            />\n          )}\n          {this.state.adjustment && (\n            <SplitByAdjustment\n              contributors={contributors}\n              expenseAmount={expenseAmount}\n              handleSplit={this.handleSplit}\n              />\n          )}\n        </Dialog>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(PerPersonShareDialogStyles)(PerPersonShareDialog);\n","/home/rahul/Desktop/projects/GoDutch/src/Components/UserBalance.js",[],"/home/rahul/Desktop/projects/GoDutch/src/Components/SplitByPercentage.js",["127"],"import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\n\nconst splitByPercentageStyles = {\n  list: {\n    display: \"flex\",\n    margin: \"1rem 0rem\",\n    justifyContent: \"space-between\",\n  },\n  avatar: {\n    width: \"35px !important\",\n    height: \"35px !important\",\n    borderRadius: \"50%\",\n    backgroundImage: `url(\"https://bit.ly/2UhwGb4\")`,\n    border: \"3px solid #00b8a9\",\n    marginRight: \"10px\",\n  },\n  user: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  percentValue: {\n    width: \"4rem\",\n  },\n  ok: {\n    textAlign: \"right\",\n    margin: \"3rem 1rem 0 0\",\n    color: \"#009900\",\n    cursor: \"pointer\",\n    fontWeight: \"bold\",\n  },\n  total: {\n    textAlign:\"center\",\n    fontSize:\"2rem\"\n  },\n  error: {\n    color: \"#ff7b25\",\n    fontWeight: \"500\",\n  },\n};\n\nclass SplitByPercentage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      percentageShare: {},\n      total: 0.0,\n      error: false,\n    };\n  }\n\n  handlePercentageShare = (id) => (e) => {\n    let { percentageShare } = this.state;\n    let currentVal = parseInt(e.target.value !== \"NaN\" ? e.target.value : \"\");\n    let upadatedPercentageShare = { ...percentageShare, [id]: currentVal };\n    const keys = Object.keys(percentageShare);\n\n    let total = 0;\n    keys.forEach((key) => {\n      total += upadatedPercentageShare[key] !== \"NaN\" ? upadatedPercentageShare[key] : 0;\n    });\n    console.log(total);\n    if (total > 100) {\n      this.setState({\n        percentageShare: upadatedPercentageShare,\n        total,\n        error: true,\n      });\n    } else {\n      this.setState({ \n        percentageShare: upadatedPercentageShare,\n        total,\n        error: false,\n      });\n    }\n  };\n\n  handleExpenseSplit = () => {\n    const { percentageShare, total } = this.state;\n    const {expenseAmount, contributors} = this.props;\nif(total === 100) {\nlet contributorsUpdated = contributors.map((person) => {\n let expenseShare = (percentageShare[person.id]*expenseAmount)/100\n  return {...person, expenseShare }\n})\nconsole.log(contributorsUpdated)\nthis.props.handleSplit(contributorsUpdated)\n\n}\nelse {\nconsole.log(\"expense doesn't match up\");\n}\n  }\n\n  render() {\n    const { classes, contributors } = this.props;\n    const { percentageShare, total, error } = this.state;\n    return (\n      <div className={classes.splitUnequally}>\n        {contributors.map((contributor, i) => {\n          let { id, name } = contributor;\n          return (\n            <div className={classes.list} key={id}>\n              <div className={classes.user}>\n                <div className={classes.avatar}></div>\n                <div className={classes.name}>{name}</div>\n              </div>\n              <div>\n                <TextField\n                  id=\"description\"\n                  className={classes.percentValue}\n                  placeholder=\"0\"\n                  type=\"number\"\n                  value={percentageShare[id] || \"\"}\n                  onChange={this.handlePercentageShare(id)}\n                  required\n                  InputProps={{\n                    endAdornment: (\n                      <InputAdornment position=\"end\">%</InputAdornment>\n                    ),\n                  }}\n                />\n              </div>\n            </div>\n          );\n        })}\n        <div className={classes.total, error ? classes.error : undefined}>Total:{total}% of 100%</div>\n        <div>{100 - total}% left</div>\n        <div className={classes.ok} onClick={this.handleExpenseSplit}>\n          OK\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(splitByPercentageStyles)(SplitByPercentage);\n","/home/rahul/Desktop/projects/GoDutch/src/App.js",[],"/home/rahul/Desktop/projects/GoDutch/src/Components/ConfirmFriends.js",[],["128","129"],"/home/rahul/Desktop/projects/GoDutch/src/Components/WhoPaidDialog.js",[],["130","131"],"/home/rahul/Desktop/projects/GoDutch/src/Components/SplitUnequally.js",[],"/home/rahul/Desktop/projects/GoDutch/src/Components/FilterDialog.js",[],"/home/rahul/Desktop/projects/GoDutch/src/reportWebVitals.js",[],"/home/rahul/Desktop/projects/GoDutch/src/Components/AddDetails.js",["132"],"/home/rahul/Desktop/projects/GoDutch/src/Components/EditFriendDetails.js",[],"/home/rahul/Desktop/projects/GoDutch/src/Components/GroupsTab.js",[],"/home/rahul/Desktop/projects/GoDutch/src/Components/SplitByAdjustment.js",["133"],"import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst splitByAdjustmentStyles = {\n  list: {\n    display: \"flex\",\n    margin: \"1rem 0rem\",\n    justifyContent: \"space-between\",\n  },\n  avatar: {\n    width: \"35px !important\",\n    height: \"35px !important\",\n    borderRadius: \"50%\",\n    backgroundImage: `url(\"https://bit.ly/2UhwGb4\")`,\n    border: \"3px solid #00b8a9\",\n    marginRight: \"10px\",\n  },\n  user: {\n    display:\"flex\",\n    alignItems:\"center\"\n  }\n};\n\nclass SplitByAdjustment extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  render() {\n    const { classes, contributors } = this.props;\n    return (\n      <div className={classes.splitUnequally}>\n        {contributors.map((contributor, i) => {\n          let { id, name } = contributor;\n          return (\n            <div className={classes.list} key={id}>\n              <div className={classes.user}>\n                <div className={classes.avatar}></div>\n                <div className={classes.name}>{name}</div>\n              </div>\n            </div>\n          );\n        })}\n        <div className={classes.ok} onClick={this.handleExpenseSplit}>OK</div>\n\n      </div>\n    );\n  }\n}\n\nfunction SplitByAdjustment1(props) {\n  const { classes, contributors } = props;\nlet handleExpenseSplit = () => {\n  \n}\nreturn (\n  <div className={classes.splitUnequally}>\n        {contributors.map((contributor, i) => {\n          let { id, name } = contributor;\n          return (\n            <div className={classes.list} key={id}>\n              <div className={classes.user}>\n                <div className={classes.avatar}></div>\n                <div className={classes.name}>{name}</div>\n              </div>\n            </div>\n          );\n        })}\n        <div className={classes.ok} onClick={handleExpenseSplit}>OK</div>\n      </div>\n)\n}\n\nexport default withStyles(splitByAdjustmentStyles)(SplitByAdjustment);\n","/home/rahul/Desktop/projects/GoDutch/src/Components/FriendsList.js",["134"],"import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst FriendsInDashboardStyles = {\n  friendsList: {\n    padding: \"10px 20px\"\n  },\n  avatar: {\n    width: \"45px !important\",\n    height: \"40px !important\",\n    borderRadius: \"50%\",\n    backgroundImage: `url(\"https://bit.ly/2UhwGb4\")`,\n    border: \"3px solid #00b8a9\",\n    marginRight: \"10px\"\n  },\n  friend: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    marginTop:\"1rem\"\n  },\n  left: {\n    display: \"flex\",\n    alignItems: \"center\"\n  },\n  FriendName: {\n\n  },\n  right: {\n    display: \"flex\",\n    alignItems: \"center\"\n  }\n};\n\nclass FriendsInDashboard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      friends: false\n    };\n  }\n  render() {\n    const { classes, friendsList } = this.props;\n    return (\n        \n      <div className={classes.friendSummary}>\n          {friendsList.map((friend) => {\n              if(friend.balance) {\n                return (\n                  <div className={classes.friend}>\n                  <div className={classes.left}>\n                    <div className={classes.avatar} />\n                    <div className={classes.FriendName}>{friend.name}</div>\n                  </div>\n                  <div className={classes.right}>{friend.balance}</div>\n                </div>\n                )\n              }\n          })}\n      </div>\n    );\n  }\n}\n\nexport default withStyles(FriendsInDashboardStyles)(FriendsInDashboard);\n","/home/rahul/Desktop/projects/GoDutch/src/Components/Header.js",[],"/home/rahul/Desktop/projects/GoDutch/src/Components/ThreeDotsPopover.js",[],"/home/rahul/Desktop/projects/GoDutch/src/Components/SplitByShare.js",[],"/home/rahul/Desktop/projects/GoDutch/src/Components/NavBar.js",[],"/home/rahul/Desktop/projects/GoDutch/src/Components/PaidByWarning.js",[],"/home/rahul/Desktop/projects/GoDutch/src/Components/FriendsTab.js",["135"],{"ruleId":"136","severity":1,"message":"137","line":277,"column":9,"nodeType":"138","messageId":"139","endLine":277,"endColumn":31},{"ruleId":"140","severity":1,"message":"141","line":449,"column":1,"nodeType":"142","messageId":"143","endLine":463,"endColumn":2},{"ruleId":"140","severity":1,"message":"141","line":465,"column":1,"nodeType":"142","messageId":"143","endLine":592,"endColumn":2},{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","replacedBy":"147"},{"ruleId":"144","replacedBy":"148"},{"ruleId":"146","replacedBy":"149"},{"ruleId":"144","replacedBy":"150"},{"ruleId":"146","replacedBy":"151"},{"ruleId":"152","severity":1,"message":"153","line":56,"column":5,"nodeType":"154","messageId":"155","endLine":72,"endColumn":6},{"ruleId":"156","severity":1,"message":"157","line":86,"column":11,"nodeType":"158","messageId":"159","endLine":86,"endColumn":13},{"ruleId":"160","severity":1,"message":"161","line":129,"column":38,"nodeType":"162","messageId":"163","endLine":129,"endColumn":39},{"ruleId":"144","replacedBy":"164"},{"ruleId":"146","replacedBy":"165"},{"ruleId":"144","replacedBy":"166"},{"ruleId":"146","replacedBy":"167"},{"ruleId":"136","severity":1,"message":"168","line":125,"column":15,"nodeType":"138","messageId":"139","endLine":125,"endColumn":28},{"ruleId":"136","severity":1,"message":"169","line":53,"column":10,"nodeType":"138","messageId":"139","endLine":53,"endColumn":28},{"ruleId":"170","severity":1,"message":"171","line":46,"column":37,"nodeType":"172","messageId":"173","endLine":46,"endColumn":39},{"ruleId":"136","severity":1,"message":"174","line":71,"column":12,"nodeType":"138","messageId":"139","endLine":71,"endColumn":23},"no-unused-vars","'contributorsWithoutYou' is assigned a value but never used.","Identifier","unusedVar","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","no-native-reassign",["175"],"no-negated-in-lhs",["176"],["175"],["176"],["175"],["176"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression",["175"],["176"],["175"],["176"],"'currentFriend' is assigned a value but never used.","'SplitByAdjustment1' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'friendsList' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]